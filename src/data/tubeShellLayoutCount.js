import * as _ from 'lodash'
const raw = `@0.75/1/3
8,37,30,24,24
10,61,52,40,36
12,92,82,76,74,70
13.25,109,106,86,82,74
15.25,151,138,122,118,110
17.25,203,196,178,172,166
19.25,262,250,226,216,210
21.25,316,302,278,272,260
23.25,384,376,352,342,328
25,470,452,422,394,382
27,559,534,488,474,464
29,630,604,556,538,508
31,745,728,678,666,640
33,856,830,774,760,732
35,970,938,882,864,848
37,1074,1044,1012,986,870
39,1206,1176,1128,1100,1078
@1/1.25/3
8,21,16,16,14
10,32,32,26,24
12,55,52,48,46,44
13.25,68,66,58,54,50
15.25,91,86,80,74,72
17.25,131,118,106,104,94
19.25,163,152,140,136,128
21.25,199,188,170,164,160
23.25,241,232,212,212,202
25,294,282,256,252,242
27,349,334,302,296,286
29,397,376,338,334,316
31,472,454,430,424,400
33,538,522,486,470,454
35,608,592,562,546,532
37,674,664,632,614,598
39,766,736,700,688,672
@0.75/1/4
8,32,26,20,20
10,52,52,40,36
12,81,76,68,68,60
13.25,97,90,82,76,70
15.25,137,124,116,108,108
17.25,177,166,158,150,142
19.25,224,220,204,192,188
21.25,277,270,246,240,234
23.25,341,324,308,302,292
25,413,394,370,356,346
27,481,460,432,420,408
29,553,526,480,468,456
31,657,640,600,580,560
33,749,718,688,676,648
35,845,824,780,766,748
37,934,914,886,866,838
39,1049,1024,982,968,948
@1/1.25/4
8,21,16,14
10,32,32,26,24
12,48,45,40,38,36
13.25,61,56,52,48,44
15.25,81,76,68,68,64
17.25,112,112,96,90,82
19.25,138,132,128,122,116
21.25,177,166,158,152,148
23.25,213,208,192,184,184
25,260,252,238,226,222
27,300,288,278,268,260
29,341,326,300,294,286
31,406,398,380,368,358
33,465,460,432,420,414
35,522,518,488,484,472
37,596,574,562,544,532
39,665,644,624,612,600
@0.75/0.9375/3
8,36,32,26,24,18
10,62,56,47,42,36
12,109,98,86,82,78
13.25,127,114,96,90,86
15.25,170,160,140,136,128
17.25,239,224,194,188,178
19.25,301,282,252,244,234
21.25,361,342,314,306,290
23.25,442,420,386,378,364
25,532,506,468,446,434
27,637,602,550,536,524
29,721,692,640,620,594
31,847,822,766,722,720
33,974,938,878,852,826
35,1102,1068,1004,988,958
37,1240,1200,1144,1104,1072
39,1377,1330,1258,1248,1212
@1.25/1.5625/4
10,16,12,10
12,30,24,22,16,16
13.25,32,30,30,22,22
15.25,44,40,37,35,31
17.25,56,53,51,48,44
19.25,78,73,71,64,56
21.25,96,90,86,82,78
23.25,127,112,106,102,96
25,140,135,127,123,115
27,166,160,151,146,140
29,193,188,178,174,166
31,226,220,209,202,193
33,258,252,244,238,226
35,293,287,275,268,258
37,334,322,311,304,293
39,370,362,348,342,336
@1.5/1.875/4
12,16,16,12,12
13.25,22,22,16,16
15.25,29,29,24,24,22
17.25,29,39,34,32,29
19.25,50,48,45,43,39
21.25,62,60,57,54,50
23.25,78,74,70,66,62
25,94,90,86,84,78
27,112,108,102,98,94
29,131,127,120,116,112
31,151,146,141,138,131
33,176,170,164,160,151
35,202,196,188,182,176
37,224,220,217,210,202
39,252,246,237,230,224
@1.5/1.875/3
12,18,14,14,12,12
13.25,27,22,18,16,14
15.25,26,34,32,30,27
17.25,48,44,42,38,36
19.25,61,58,55,51,48
21.25,76,78,70,66,61
23.25,95,91,86,80,76
25,115,110,105,98,95
27,136,131,125,118,115
29,160,154,147,141,136
31,184,177,172,165,160
33,215,206,200,190,184
35,246,238,230,220,215
37,275,268,260,252,246
39,307,299,290,284,275
@1.25/0.5625/3
10,20,18,14
12.25,32,30,26,22,20
13.25,38,36,32,28,26
15.25,54,51,45,42,38
17.25,69,66,62,58,54
19.25,95,91,86,78,69
21.25,117,112,105,101,95
23.25,140,136,130,123,117
25,170,164,155,150,140
27,202,196,185,179,170
29,235,228,217,212,202
31,275,270,255,245,235
33,315,305,297,288,275
35,357,348,335,327,315
37,407,390,380,374,357
39,449,436,425,419,407`
const nanData = {
  tubeOuterDiameter: NaN,
  pitchLength: NaN,
  tubeLayout: NaN,
  shellDiameter: NaN,
  tubePass: NaN,
  numberOfTubes: NaN,
}
const tubePassList = [1, 2, 4, 6, 8]
const parseData = raw
  .split('@')
  .filter(Boolean)
  .map(r => r.split(/\n/).filter(Boolean))
  .map(r => {
    const [info, ...data] = r
    const newData = data.reduce((o, a) => {
      const [shellSizeKey, ...num] = a.split(',')
      o[info + '/' + shellSizeKey] = num.map(Number)
      return o
    }, {})
    return newData
  })
  .reduce((o, v, k) => {
    _.forEach(v, (vv, kk) => {
      _.forEach(vv, (vvv, passIndex) => {
        o.push(kk + '/' + tubePassList[passIndex] + '/' + vvv)
      })
    })
    return o
  }, [])
  .map(s => s.split('/').map(Number))
// tubeDiameter // pitchLength // tubeLayout //shellDiameter
const INCH2M = 0.0254
const M2INCH = 1 / INCH2M
const getData = param => {
  const {
    tubeOuterDiameter,
    pitchLength,
    tubeLayout,
    shellDiameter,
    tubePass,
    numberOfTubes,
  } = param
  const pitchLayoutNumber =
    tubeLayout === 45 || tubeLayout === 90
      ? 4
      : tubeLayout === 30 || tubeLayout === 60
      ? 3
      : new Error('invalid-pitch-layout')
  if (pitchLayoutNumber instanceof Error) return nanData
  const tubeOuterDiameterInch = tubeOuterDiameter * M2INCH
  const pitchLengthInch = pitchLength * M2INCH
  const shellDiameterInch = shellDiameter * M2INCH
  const layoutFilter = parseData.filter(
    ([t, , l, , pass, tubes]) =>
      t > tubeOuterDiameterInch - 0.25 &&
      l === pitchLayoutNumber &&
      tubePass === pass &&
      tubes >= numberOfTubes,
  )
  // console.log(layoutFilter);
  // console.log(shellDiameter, shellDiameterInch);
  // console.log(pitchLength, pitchLengthInch);
  const scoringSort = layoutFilter
    .map(a => {
      const [t, l, , d, , tubes] = a
      const score =
        Math.abs(t - tubeOuterDiameterInch) +
        Math.abs(l - pitchLengthInch) +
        Math.abs(d - shellDiameterInch) +
        Math.abs(tubes - numberOfTubes) / 10
      return [score, a]
    })
    .sort(([a], [b]) => a - b)
  if (!scoringSort.length) return nanData
  // console.log(scoringSort);
  const [[, top]] = scoringSort
  // console.log(top);
  if (!top) return nanData
  return {
    tubeOuterDiameter: top[0] * INCH2M,
    pitchLength: top[1] * INCH2M,
    tubeLayout: top[2],
    shellDiameter: top[3] * INCH2M,
    tubePass: top[4],
    numberOfTubes: top[5],
  }
}
export default getData
